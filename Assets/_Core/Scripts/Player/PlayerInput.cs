//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.0
//     from Assets/_Core/Scripts/Player/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""CharacterMovement"",
            ""id"": ""c92e1f7f-1462-4e76-a91f-f04977b83212"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""687ed77c-c7f3-4559-a00d-8cd2401f2343"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""NormalizeVector2"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""Button"",
                    ""id"": ""fed5e089-06c9-477a-9fb5-e11308ed095c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""b52d7f37-65a6-4469-9db6-888ebedf00ea"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""b80809a1-1a12-4f8e-9237-5e5b60f03252"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""785b85b0-6771-44ca-88cb-f73f4be0c896"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""d73398f0-9d9f-4a37-bf26-5632553b7a86"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""761d2c4c-c2d6-4b3f-a51d-3c91e119f3b2"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""3fd2cd28-d164-4816-a120-d77339e79e5c"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""b5ee231b-6411-497e-baab-2673c65d6c95"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""972be0aa-dfe0-4938-9e2c-6d46db0c07ee"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""97000970-50f9-4674-865b-43f7f1a62f76"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0208e665-f43d-4c5a-91a9-90c41a515043"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4b4d6ed8-abd1-43f9-9f15-2825478eef0a"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a4cc16df-8859-4cf7-b675-c9a890b34c94"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""91095636-bc7a-4a07-a7be-a5c804da8f8f"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8f05c916-5583-41e2-a6aa-9235212d27dd"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""CharacterAbilities"",
            ""id"": ""c93b1688-0099-43b4-b6d6-8e4061574aa4"",
            ""actions"": [
                {
                    ""name"": ""AutoAttack"",
                    ""type"": ""Button"",
                    ""id"": ""4c1fd762-0a06-4f51-b4f4-d0bf52424809"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HeavyAttack"",
                    ""type"": ""Button"",
                    ""id"": ""75179a5f-ca2b-4f77-ae7d-258638c68fbf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OA1"",
                    ""type"": ""Button"",
                    ""id"": ""3115f42b-73f1-4ca5-b9b5-7649a808d131"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OA2"",
                    ""type"": ""Button"",
                    ""id"": ""4aefda73-006d-400c-be12-c59bedc18ec1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9f77e25e-f05e-4b92-8b48-db6a2f27c1f0"",
                    ""path"": ""<Keyboard>/v"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OA2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2ef1a064-9260-4fde-8305-a59f03791e14"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OA2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2a04a731-a758-454e-b10d-ae3c533159ad"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OA1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a872b806-81a4-4444-97c4-e54703ecba84"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OA1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""211202e0-5c23-4dd3-991c-5f3793d24bd8"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AutoAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""608f51b3-a11c-4e36-b1e8-48e05996d456"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AutoAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""90082b7c-0fa3-48f9-b049-8f5943f55e2f"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HeavyAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8917d445-e2b3-4b3f-8809-4b1a4d7b64bb"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HeavyAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""CharacterUI"",
            ""id"": ""b361d410-7e93-46bb-bb65-3ae938ef0585"",
            ""actions"": [
                {
                    ""name"": ""Inventory"",
                    ""type"": ""Button"",
                    ""id"": ""4f5e5f70-7036-4dd4-9e31-41943f415510"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UseItem1"",
                    ""type"": ""Button"",
                    ""id"": ""253ee8db-2102-474a-8dc6-312cbdf8650f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UseItem2"",
                    ""type"": ""Button"",
                    ""id"": ""e2fa2ec5-4449-42a3-b3b7-c2ba6969151d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b11cf579-7a60-4475-99d7-fb3a04643058"",
                    ""path"": ""<Keyboard>/b"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Inventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""84d61a82-4187-4b4f-a204-51c80252afee"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Inventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""461d742e-dc4f-4ccc-a1b7-288e1bbd1fac"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UseItem1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""13049940-a818-49d0-baee-8fcecb2484aa"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UseItem1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f9bd6db0-1468-4a41-826e-6ba5847d173b"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UseItem2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5e36c0ec-7306-4d4e-995f-6320cb148848"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UseItem2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // CharacterMovement
        m_CharacterMovement = asset.FindActionMap("CharacterMovement", throwIfNotFound: true);
        m_CharacterMovement_Move = m_CharacterMovement.FindAction("Move", throwIfNotFound: true);
        m_CharacterMovement_Sprint = m_CharacterMovement.FindAction("Sprint", throwIfNotFound: true);
        m_CharacterMovement_Jump = m_CharacterMovement.FindAction("Jump", throwIfNotFound: true);
        m_CharacterMovement_Dash = m_CharacterMovement.FindAction("Dash", throwIfNotFound: true);
        // CharacterAbilities
        m_CharacterAbilities = asset.FindActionMap("CharacterAbilities", throwIfNotFound: true);
        m_CharacterAbilities_AutoAttack = m_CharacterAbilities.FindAction("AutoAttack", throwIfNotFound: true);
        m_CharacterAbilities_HeavyAttack = m_CharacterAbilities.FindAction("HeavyAttack", throwIfNotFound: true);
        m_CharacterAbilities_OA1 = m_CharacterAbilities.FindAction("OA1", throwIfNotFound: true);
        m_CharacterAbilities_OA2 = m_CharacterAbilities.FindAction("OA2", throwIfNotFound: true);
        // CharacterUI
        m_CharacterUI = asset.FindActionMap("CharacterUI", throwIfNotFound: true);
        m_CharacterUI_Inventory = m_CharacterUI.FindAction("Inventory", throwIfNotFound: true);
        m_CharacterUI_UseItem1 = m_CharacterUI.FindAction("UseItem1", throwIfNotFound: true);
        m_CharacterUI_UseItem2 = m_CharacterUI.FindAction("UseItem2", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // CharacterMovement
    private readonly InputActionMap m_CharacterMovement;
    private List<ICharacterMovementActions> m_CharacterMovementActionsCallbackInterfaces = new List<ICharacterMovementActions>();
    private readonly InputAction m_CharacterMovement_Move;
    private readonly InputAction m_CharacterMovement_Sprint;
    private readonly InputAction m_CharacterMovement_Jump;
    private readonly InputAction m_CharacterMovement_Dash;
    public struct CharacterMovementActions
    {
        private @PlayerInput m_Wrapper;
        public CharacterMovementActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_CharacterMovement_Move;
        public InputAction @Sprint => m_Wrapper.m_CharacterMovement_Sprint;
        public InputAction @Jump => m_Wrapper.m_CharacterMovement_Jump;
        public InputAction @Dash => m_Wrapper.m_CharacterMovement_Dash;
        public InputActionMap Get() { return m_Wrapper.m_CharacterMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CharacterMovementActions set) { return set.Get(); }
        public void AddCallbacks(ICharacterMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_CharacterMovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CharacterMovementActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Sprint.started += instance.OnSprint;
            @Sprint.performed += instance.OnSprint;
            @Sprint.canceled += instance.OnSprint;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Dash.started += instance.OnDash;
            @Dash.performed += instance.OnDash;
            @Dash.canceled += instance.OnDash;
        }

        private void UnregisterCallbacks(ICharacterMovementActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Sprint.started -= instance.OnSprint;
            @Sprint.performed -= instance.OnSprint;
            @Sprint.canceled -= instance.OnSprint;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Dash.started -= instance.OnDash;
            @Dash.performed -= instance.OnDash;
            @Dash.canceled -= instance.OnDash;
        }

        public void RemoveCallbacks(ICharacterMovementActions instance)
        {
            if (m_Wrapper.m_CharacterMovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICharacterMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_CharacterMovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CharacterMovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CharacterMovementActions @CharacterMovement => new CharacterMovementActions(this);

    // CharacterAbilities
    private readonly InputActionMap m_CharacterAbilities;
    private List<ICharacterAbilitiesActions> m_CharacterAbilitiesActionsCallbackInterfaces = new List<ICharacterAbilitiesActions>();
    private readonly InputAction m_CharacterAbilities_AutoAttack;
    private readonly InputAction m_CharacterAbilities_HeavyAttack;
    private readonly InputAction m_CharacterAbilities_OA1;
    private readonly InputAction m_CharacterAbilities_OA2;
    public struct CharacterAbilitiesActions
    {
        private @PlayerInput m_Wrapper;
        public CharacterAbilitiesActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @AutoAttack => m_Wrapper.m_CharacterAbilities_AutoAttack;
        public InputAction @HeavyAttack => m_Wrapper.m_CharacterAbilities_HeavyAttack;
        public InputAction @OA1 => m_Wrapper.m_CharacterAbilities_OA1;
        public InputAction @OA2 => m_Wrapper.m_CharacterAbilities_OA2;
        public InputActionMap Get() { return m_Wrapper.m_CharacterAbilities; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CharacterAbilitiesActions set) { return set.Get(); }
        public void AddCallbacks(ICharacterAbilitiesActions instance)
        {
            if (instance == null || m_Wrapper.m_CharacterAbilitiesActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CharacterAbilitiesActionsCallbackInterfaces.Add(instance);
            @AutoAttack.started += instance.OnAutoAttack;
            @AutoAttack.performed += instance.OnAutoAttack;
            @AutoAttack.canceled += instance.OnAutoAttack;
            @HeavyAttack.started += instance.OnHeavyAttack;
            @HeavyAttack.performed += instance.OnHeavyAttack;
            @HeavyAttack.canceled += instance.OnHeavyAttack;
            @OA1.started += instance.OnOA1;
            @OA1.performed += instance.OnOA1;
            @OA1.canceled += instance.OnOA1;
            @OA2.started += instance.OnOA2;
            @OA2.performed += instance.OnOA2;
            @OA2.canceled += instance.OnOA2;
        }

        private void UnregisterCallbacks(ICharacterAbilitiesActions instance)
        {
            @AutoAttack.started -= instance.OnAutoAttack;
            @AutoAttack.performed -= instance.OnAutoAttack;
            @AutoAttack.canceled -= instance.OnAutoAttack;
            @HeavyAttack.started -= instance.OnHeavyAttack;
            @HeavyAttack.performed -= instance.OnHeavyAttack;
            @HeavyAttack.canceled -= instance.OnHeavyAttack;
            @OA1.started -= instance.OnOA1;
            @OA1.performed -= instance.OnOA1;
            @OA1.canceled -= instance.OnOA1;
            @OA2.started -= instance.OnOA2;
            @OA2.performed -= instance.OnOA2;
            @OA2.canceled -= instance.OnOA2;
        }

        public void RemoveCallbacks(ICharacterAbilitiesActions instance)
        {
            if (m_Wrapper.m_CharacterAbilitiesActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICharacterAbilitiesActions instance)
        {
            foreach (var item in m_Wrapper.m_CharacterAbilitiesActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CharacterAbilitiesActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CharacterAbilitiesActions @CharacterAbilities => new CharacterAbilitiesActions(this);

    // CharacterUI
    private readonly InputActionMap m_CharacterUI;
    private List<ICharacterUIActions> m_CharacterUIActionsCallbackInterfaces = new List<ICharacterUIActions>();
    private readonly InputAction m_CharacterUI_Inventory;
    private readonly InputAction m_CharacterUI_UseItem1;
    private readonly InputAction m_CharacterUI_UseItem2;
    public struct CharacterUIActions
    {
        private @PlayerInput m_Wrapper;
        public CharacterUIActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Inventory => m_Wrapper.m_CharacterUI_Inventory;
        public InputAction @UseItem1 => m_Wrapper.m_CharacterUI_UseItem1;
        public InputAction @UseItem2 => m_Wrapper.m_CharacterUI_UseItem2;
        public InputActionMap Get() { return m_Wrapper.m_CharacterUI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CharacterUIActions set) { return set.Get(); }
        public void AddCallbacks(ICharacterUIActions instance)
        {
            if (instance == null || m_Wrapper.m_CharacterUIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CharacterUIActionsCallbackInterfaces.Add(instance);
            @Inventory.started += instance.OnInventory;
            @Inventory.performed += instance.OnInventory;
            @Inventory.canceled += instance.OnInventory;
            @UseItem1.started += instance.OnUseItem1;
            @UseItem1.performed += instance.OnUseItem1;
            @UseItem1.canceled += instance.OnUseItem1;
            @UseItem2.started += instance.OnUseItem2;
            @UseItem2.performed += instance.OnUseItem2;
            @UseItem2.canceled += instance.OnUseItem2;
        }

        private void UnregisterCallbacks(ICharacterUIActions instance)
        {
            @Inventory.started -= instance.OnInventory;
            @Inventory.performed -= instance.OnInventory;
            @Inventory.canceled -= instance.OnInventory;
            @UseItem1.started -= instance.OnUseItem1;
            @UseItem1.performed -= instance.OnUseItem1;
            @UseItem1.canceled -= instance.OnUseItem1;
            @UseItem2.started -= instance.OnUseItem2;
            @UseItem2.performed -= instance.OnUseItem2;
            @UseItem2.canceled -= instance.OnUseItem2;
        }

        public void RemoveCallbacks(ICharacterUIActions instance)
        {
            if (m_Wrapper.m_CharacterUIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICharacterUIActions instance)
        {
            foreach (var item in m_Wrapper.m_CharacterUIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CharacterUIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CharacterUIActions @CharacterUI => new CharacterUIActions(this);
    public interface ICharacterMovementActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnSprint(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnDash(InputAction.CallbackContext context);
    }
    public interface ICharacterAbilitiesActions
    {
        void OnAutoAttack(InputAction.CallbackContext context);
        void OnHeavyAttack(InputAction.CallbackContext context);
        void OnOA1(InputAction.CallbackContext context);
        void OnOA2(InputAction.CallbackContext context);
    }
    public interface ICharacterUIActions
    {
        void OnInventory(InputAction.CallbackContext context);
        void OnUseItem1(InputAction.CallbackContext context);
        void OnUseItem2(InputAction.CallbackContext context);
    }
}
